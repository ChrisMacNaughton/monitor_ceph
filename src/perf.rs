extern crate rustc_serialize;

use rustc_serialize::{Decodable, Decoder, json};

#[derive(Debug, RustcDecodable)]
struct JsonWbthrottle {
    bytes_dirtied: i64,
    bytes_wb: i64,
    ios_dirtied: i64,
    ios_wb: i64,
    inodes_dirtied: i64,
    inodes_wb: i64,
}

#[derive(Debug, RustcDecodable)]
struct JsonFilestoreJournalLatency {
    avgcount: i64,
    sum: f64,
}

#[derive(Debug, RustcDecodable)]
struct JsonFilestoreJournalWrByte {
    avgcount: i64,
    sum: i64,
}

#[derive(Debug, RustcDecodable)]
struct JsonFilestore {
    journal_queue_max_ops: i64,
    journal_queue_ops: i64,
    journal_ops: i64,
    journal_queue_max_bytes: i64,
    journal_queue_bytes: i64,
    journal_bytes: i64,
    journal_latency: JsonFilestoreJournalLatency,
    journal_wr: i64,
    journal_wr_bytes: JsonFilestoreJournalWrByte,
    journal_full: i64,
    committing: i64,
    commitcycle: i64,
    commitcycle_interval: JsonFilestoreJournalLatency,
    commitcycle_latency: JsonFilestoreJournalLatency,
    op_queue_max_ops: i64,
    op_queue_ops: i64,
    ops: i64,
    op_queue_max_bytes: i64,
    op_queue_bytes: i64,
    bytes: i64,
    apply_latency: JsonFilestoreJournalLatency,
    queue_transaction_latency_avg: JsonFilestoreJournalLatency,
}

#[derive(Debug, RustcDecodable)]
struct JsonLeveldb {
    leveldb_get: i64,
    leveldb_transaction: i64,
    leveldb_compact: i64,
    leveldb_compact_range: i64,
    leveldb_compact_queue_merge: i64,
    leveldb_compact_queue_len: i64,
}

#[derive(Debug, RustcDecodable)]
struct JsonMutexFilejournalCompletionsLock {
    wait: JsonFilestoreJournalLatency,
}

#[derive(Debug, RustcDecodable)]
struct JsonObjecter {
    op_active: i64,
    op_laggy: i64,
    op_send: i64,
    op_send_bytes: i64,
    op_resend: i64,
    op_ack: i64,
    op_commit: i64,
    op: i64,
    op_r: i64,
    op_w: i64,
    op_rmw: i64,
    op_pg: i64,
    osdop_stat: i64,
    osdop_create: i64,
    osdop_read: i64,
    osdop_write: i64,
    osdop_writefull: i64,
    osdop_append: i64,
    osdop_zero: i64,
    osdop_truncate: i64,
    osdop_delete: i64,
    osdop_mapext: i64,
    osdop_sparse_read: i64,
    osdop_clonerange: i64,
    osdop_getxattr: i64,
    osdop_setxattr: i64,
    osdop_cmpxattr: i64,
    osdop_rmxattr: i64,
    osdop_resetxattrs: i64,
    osdop_tmap_up: i64,
    osdop_tmap_put: i64,
    osdop_tmap_get: i64,
    osdop_call: i64,
    osdop_watch: i64,
    osdop_notify: i64,
    osdop_src_cmpxattr: i64,
    osdop_pgls: i64,
    osdop_pgls_filter: i64,
    osdop_other: i64,
    linger_active: i64,
    linger_send: i64,
    linger_resend: i64,
    poolop_active: i64,
    poolop_send: i64,
    poolop_resend: i64,
    poolstat_active: i64,
    poolstat_send: i64,
    poolstat_resend: i64,
    statfs_active: i64,
    statfs_send: i64,
    statfs_resend: i64,
    command_active: i64,
    command_send: i64,
    command_resend: i64,
    map_epoch: i64,
    map_full: i64,
    map_inc: i64,
    osd_sessions: i64,
    osd_session_open: i64,
    osd_session_close: i64,
    osd_laggy: i64,
}

#[derive(Debug, RustcDecodable)]
struct JsonOsd {
    opq: i64,
    op_wip: i64,
    op: i64,
    op_in_bytes: i64,
    op_out_bytes: i64,
    op_latency: JsonFilestoreJournalLatency,
    op_process_latency: JsonFilestoreJournalLatency,
    op_r: i64,
    op_r_out_bytes: i64,
    op_r_latency: JsonFilestoreJournalLatency,
    op_r_process_latency: JsonFilestoreJournalLatency,
    op_w: i64,
    op_w_in_bytes: i64,
    op_w_rlat: JsonFilestoreJournalLatency,
    op_w_latency: JsonFilestoreJournalLatency,
    op_w_process_latency: JsonFilestoreJournalLatency,
    op_rw: i64,
    op_rw_in_bytes: i64,
    op_rw_out_bytes: i64,
    op_rw_rlat: JsonFilestoreJournalLatency,
    op_rw_latency: JsonFilestoreJournalLatency,
    op_rw_process_latency: JsonFilestoreJournalLatency,
    subop: i64,
    subop_in_bytes: i64,
    subop_latency: JsonFilestoreJournalLatency,
    subop_w: i64,
    subop_w_in_bytes: i64,
    subop_w_latency: JsonFilestoreJournalLatency,
    subop_pull: i64,
    subop_pull_latency: JsonFilestoreJournalLatency,
    subop_push: i64,
    subop_push_in_bytes: i64,
    subop_push_latency: JsonFilestoreJournalLatency,
    pull: i64,
    push: i64,
    push_out_bytes: i64,
    push_in: i64,
    push_in_bytes: i64,
    recovery_ops: i64,
    loadavg: i64,
    buffer_bytes: i64,
    numpg: i64,
    numpg_primary: i64,
    numpg_replica: i64,
    numpg_stray: i64,
    heartbeat_to_peers: i64,
    heartbeat_from_peers: i64,
    map_messages: i64,
    map_message_epochs: i64,
    map_message_epoch_dups: i64,
    messages_delayed_for_map: i64,
    stat_bytes: i64,
    stat_bytes_used: i64,
    stat_bytes_avail: i64,
    copyfrom: i64,
    tier_promote: i64,
    tier_flush: i64,
    tier_flush_fail: i64,
    tier_try_flush: i64,
    tier_try_flush_fail: i64,
    tier_evict: i64,
    tier_whiteout: i64,
    tier_dirty: i64,
    tier_clean: i64,
    tier_delay: i64,
    agent_wake: i64,
    agent_skip: i64,
    agent_flush: i64,
    agent_evict: i64,
}

#[derive(Debug, RustcDecodable)]
struct JsonRecoverystatePerf {
    initial_latency: JsonFilestoreJournalLatency,
    started_latency: JsonFilestoreJournalLatency,
    reset_latency: JsonFilestoreJournalLatency,
    start_latency: JsonFilestoreJournalLatency,
    primary_latency: JsonFilestoreJournalLatency,
    peering_latency: JsonFilestoreJournalLatency,
    backfilling_latency: JsonFilestoreJournalLatency,
    waitremotebackfillreserved_latency: JsonFilestoreJournalLatency,
    waitlocalbackfillreserved_latency: JsonFilestoreJournalLatency,
    notbackfilling_latency: JsonFilestoreJournalLatency,
    repnotrecovering_latency: JsonFilestoreJournalLatency,
    repwaitrecoveryreserved_latency: JsonFilestoreJournalLatency,
    repwaitbackfillreserved_latency: JsonFilestoreJournalLatency,
    RepRecovering_latency: JsonFilestoreJournalLatency,
    activating_latency: JsonFilestoreJournalLatency,
    waitlocalrecoveryreserved_latency: JsonFilestoreJournalLatency,
    waitremoterecoveryreserved_latency: JsonFilestoreJournalLatency,
    recovering_latency: JsonFilestoreJournalLatency,
    recovered_latency: JsonFilestoreJournalLatency,
    clean_latency: JsonFilestoreJournalLatency,
    active_latency: JsonFilestoreJournalLatency,
    replicaactive_latency: JsonFilestoreJournalLatency,
    stray_latency: JsonFilestoreJournalLatency,
    getinfo_latency: JsonFilestoreJournalLatency,
    getlog_latency: JsonFilestoreJournalLatency,
    waitactingchange_latency: JsonFilestoreJournalLatency,
    incomplete_latency: JsonFilestoreJournalLatency,
    getmissing_latency: JsonFilestoreJournalLatency,
    waitupthru_latency: JsonFilestoreJournalLatency,
}

#[derive(Debug, RustcDecodable)]
struct JsonThrottleFilestoreByte {
    val: i64,
    max: i64,
    get: i64,
    get_sum: i64,
    get_or_fail_fail: i64,
    get_or_fail_success: i64,
    take: i64,
    take_sum: i64,
    put: i64,
    put_sum: i64,
    wait: JsonFilestoreJournalLatency,
}

#[derive(Debug, RustcDecodable)]
struct PerfJson {
    WBThrottle: JsonWbthrottle,
    filestore: JsonFilestore,
    leveldb: JsonLeveldb,
    mutex_FileJournal_completions_lock: JsonMutexFilejournalCompletionsLock,
    mutex_FileJournal_finisher_lock: JsonMutexFilejournalCompletionsLock,
    mutex_FileJournal_write_lock: JsonMutexFilejournalCompletionsLock,
    mutex_FileJournal_writeq_lock: JsonMutexFilejournalCompletionsLock,
    mutex_JOS_ApplyManager_apply_lock: JsonMutexFilejournalCompletionsLock,
    mutex_JOS_ApplyManager_com_lock: JsonMutexFilejournalCompletionsLock,
    mutex_JOS_SubmitManager_lock: JsonMutexFilejournalCompletionsLock,
    mutex_WBThrottle_lock: JsonMutexFilejournalCompletionsLock,
    objecter: JsonObjecter,
    osd: JsonOsd,
    recoverystate_perf: JsonRecoverystatePerf,
    throttle_filestore_bytes: JsonThrottleFilestoreByte,
    throttle_filestore_ops: JsonThrottleFilestoreByte,
    throttle_msgr_dispatch_throttler_client: JsonThrottleFilestoreByte,
    throttle_msgr_dispatch_throttler_cluster: JsonThrottleFilestoreByte,
    throttle_msgr_dispatch_throttler_hb_back_server: JsonThrottleFilestoreByte,
    throttle_msgr_dispatch_throttler_hb_front_server: JsonThrottleFilestoreByte,
    throttle_msgr_dispatch_throttler_hbclient: JsonThrottleFilestoreByte,
    throttle_msgr_dispatch_throttler_ms_objecter: JsonThrottleFilestoreByte,
    throttle_objecter_bytes: JsonThrottleFilestoreByte,
    throttle_objecter_ops: JsonThrottleFilestoreByte,
    throttle_osd_client_bytes: JsonThrottleFilestoreByte,
    throttle_osd_client_messages: JsonThrottleFilestoreByte,
}

impl PerfJson{
    pub fn decode(json_data: &str) -> Result<Self, json::DecoderError> {
        let decode: PerfJson = try!(json::decode(json_data));
        return Ok(decode);
    }
    pub fn to_carbon_string(&self, root_key: &String) -> String {
        return "".to_string();
    }
}
